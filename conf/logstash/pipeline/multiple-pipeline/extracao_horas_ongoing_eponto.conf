input {
  jdbc {
     jdbc_driver_library => "/etc/logstash/driver/sqljdbc_6.0/enu/jre8/sqljdbc42.jar"
     jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
     jdbc_connection_string => "jdbc:sqlserver://10.200.100.15:1433"
     jdbc_user => "svc_sarg"
     jdbc_password => "6HzgK>aqUu7x"
     schedule => "*/5 * * * *"
     statement => "
SELECT
PERIODO, ITEM_CONTABIL , DESCRICAO_ITEM_CONTABIL , COD_ATIVIDADE , DES_ATIVIDADE , HORA_100_PC , HORA_75_PC , HORA_NORMAL , (HORA_100_PC + HORA_75_PC + HORA_NORMAL) AS HORA_TOTAL
FROM (
	SELECT
	PERIODO,ITEM_CONTABIL, DESCRICAO_ITEM_CONTABIL, COD_ATIVIDADE, DES_ATIVIDADE,
	CAST((SUM(CASE WHEN DC_DESCRICAO LIKE '%100%' THEN (HORAS)+(((HORAS - (HORAS))*100)/60) ELSE 0 END)) AS INT) AS [HORA_100_PC],
	CAST((SUM(CASE WHEN DC_DESCRICAO LIKE '%75%' THEN (HORAS)+(((HORAS - (HORAS))*100)/60) ELSE 0 END)) AS INT) AS [HORA_75_PC],
	CAST((SUM(CASE WHEN DC_DESCRICAO LIKE '%NORMAIS%' OR DC_DESCRICAO LIKE '%60%' THEN (HORAS)+(((HORAS - (HORAS))*100)/60) ELSE 0 END)) AS INT) AS [HORA_NORMAL]
	FROM (
		SELECT  
		CASE 
			WHEN 
				CAST(DAY(RH.DT_DATA) AS int) BETWEEN 1 AND 20 
					THEN (CONVERT(CHAR(6), DATEADD(MONTH,-1, RH.DT_DATA), 112)) + ' - ' + (CONVERT(CHAR(6), RH.DT_DATA, 112)) 
					ELSE (CONVERT(CHAR(6), RH.DT_DATA, 112)) + ' - ' + (CONVERT(CHAR(6), DATEADD(MONTH,+1, RH.DT_DATA), 112)) 
		END AS [PERIODO],
		LEFT(IC.NU_CODIGO,2) + '.' + RIGHT(RTRIM(IC.NU_CODIGO),2) AS [ITEM_CONTABIL], 
		LTRIM(RTRIM(IC.DC_DESCRICAO)) AS [DESCRICAO_ITEM_CONTABIL],
		AT.ID_ATIVIDADE_PK AS [COD_ATIVIDADE],
		LTRIM(RTRIM(AT.DC_NOME)) AS [DES_ATIVIDADE],
		RTRIM(EV.DC_DESCRICAO) AS [DC_DESCRICAO],
		NU_HORA AS [HORAS]
		FROM  eponto.dbo.RATEIO_HORA RH
		INNER JOIN  eponto.dbo.ATIVIDADE AT ON
		RH.ID_ATIVIDADE_FK = AT.ID_ATIVIDADE_PK
		INNER JOIN eponto.dbo.ITEM_CONTABIL IC ON
		AT.ID_ITEM_CONTABIL_FK = IC.ID_ITEM_CONTABIL_PK
		INNER JOIN eponto.dbo.EVENTO EV ON
		RH.ID_EVENTO_FK = EV.ID_EVENTO_PK 
	) AS DADOS
	GROUP BY
	PERIODO,
	ITEM_CONTABIL, DESCRICAO_ITEM_CONTABIL, COD_ATIVIDADE, DES_ATIVIDADE
) AS FINAL
WHERE PERIODO >= (
  	CONVERT(CHAR(6), DATEADD(MONTH,-6, GETDATE()), 112) + ' - ' + CONVERT(CHAR(6), DATEADD(MONTH,-5, GETDATE()), 112)
	/*CASE WHEN (DAY(GETDATE()) <= 27) THEN (CONVERT(CHAR(6), DATEADD(MONTH,-1, GETDATE()), 112)) + ' - ' + (CONVERT(CHAR(6), GETDATE(), 112))
	ELSE (CONVERT(CHAR(6), GETDATE(), 112)) + ' - ' + (CONVERT(CHAR(6), DATEADD(MONTH,+1, GETDATE()), 112))
	END*/
)
ORDER BY PERIODO DESC
, ITEM_CONTABIL, COD_ATIVIDADE
"
  }
}

## Add your filters / logstash plugins configuration here


output {
	jdbc {
	driver_jar_path => "/etc/logstash/driver/mysql-connector-java-5.1.36/mysql-connector-java-5.1.36-bin.jar"
        driver_class => "com.mysql.jdbc.Driver"
	connection_string => "jdbc:mysql://db:3306/sarg?user=root&password=root"
	statement => ["
INSERT INTO painel_ongoing_ongoing ( PERIODO, ITEM_CONTABIL, DESCRICAO_ITEM_CONTABIL, COD_ATIVIDADE, DES_ATIVIDADE, HORA_100_PC, HORA_75_PC, HORA_NORMAL, HORA_TOTAL) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?) ON DUPLICATE KEY UPDATE DESCRICAO_ITEM_CONTABIL = VALUES(DESCRICAO_ITEM_CONTABIL), DES_ATIVIDADE = VALUES(DES_ATIVIDADE), HORA_100_PC = VALUES(HORA_100_PC), HORA_75_PC = VALUES(HORA_75_PC), HORA_NORMAL = VALUES(HORA_NORMAL), HORA_TOTAL = VALUES(HORA_TOTAL)", "periodo", "item_contabil", "descricao_item_contabil", "cod_atividade", "des_atividade", "hora_100_pc", "hora_75_pc", "hora_normal", "hora_total" 
]	}
}

